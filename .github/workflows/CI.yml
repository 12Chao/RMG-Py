name: Constant Integration

on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron: "0 8 * * *"
  push:

env:
  SKIP_TESTS: True

# this prevents one PR from simultaneously running multiple runners, which will clog up the queue
# and prevent other PRs from running the CI
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test-linux:
    runs-on: ubuntu-latest
    env: # update this if needed to match a pull request on the RMG-database
      RMG_DATABASE_BRANCH: main
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v2

      # configures the mamba environment manager and build the environment
      - name: Setup mamba with Python 3.7 and Build Environment
        uses: conda-incubator/setup-miniconda@v2
        with:
          environment-file: environment.yml
          miniforge-variant: Mambaforge
          miniforge-version: latest
          python-version: 3.7
          activate-environment: rmg_env
          use-mamba: true

      # list the environment for debugging purposes
      - name: mamba info
        run: |
          mamba info
          mamba list

      # Clone the other needed repository
      - name: Clone RMG-Database
        run: |
          cd ..
          git clone -b $RMG_DATABASE_BRANCH https://github.com/ReactionMechanismGenerator/RMG-database.git
          
      # modify env variables as directed in the RMG installation instructions
      - name: Set PYTHONPATH and PATH
        run: |
          RUNNER_CWD=$(pwd)
          echo "PYTHONPATH=$RUNNER_CWD/RMG-Py:$PYTHONPATH" >> $GITHUB_ENV
          echo "$RUNNER_CWD/RMG-Py" >> $GITHUB_PATH

      # RMG build step
      - name: make RMG
        run: |
          make clean
          make

      # RMS installation and linking to Julia
      # Allow these installs to 'fail' (as they do in RMG-Tests) with the command || True trick
      - name: Install and link Julia dependencies
        run: |
          python -c "import julia; julia.install(); import diffeqpy; diffeqpy.install()" || true
          julia -e 'using Pkg; Pkg.add(PackageSpec(name="ReactionMechanismSimulator",rev="main")); using ReactionMechanismSimulator' || true 
          ln -sfn $(which python-jl) $(which python)

      # Attempt to install MOPAC
      - name: Install MOPAC
        env:
          MOPACKEY: ${{ secrets.MOPACKEY }}
        timeout-minutes: 1
        continue-on-error: true # allowed to fail on pull request from a forked repository
        run: |
          set +o pipefail
          yes 'Yes' | ${CONDA_PREFIX}/bin/mopac "$MOPACKEY"

      # non-regression testing
      - name: Unit tests
        if: ${{ env.SKIP_TESTS != 'True' }}
        run: make test-unittests
      - name: Functional tests
        if: ${{ env.SKIP_TESTS != 'True' }}
        run: make test-functional
      - name: Database tests
        if: ${{ env.SKIP_TESTS != 'True' }}
        run: make test-database

      # Regression Testing - Test Execution
      - name: Regression Tests - Execution
        run: |
          for regr_test in aromatics; #liquid_oxidation nitrogen oxidation sulfur superminimal eg1
          do
            timeout 600 python-jl rmg.py test/regression/"$regr_test"/input.py
          done

      # Upload Regression Results if Scheduled
      - name: Upload Stable Regression Testing Results
        # upload the results for scheduled CI and pushes to main
        # if: ${{ github.event_name == 'schedule' || github.ref == 'refs/heads/main' }} -> uncomment this after complete
        uses: actions/upload-artifact@v3
        with:
          name: stable-regression-results
          path: |
            test/regression/aromatics/chemkin/
            # test/regression/sulfur/chemkin

      # # Retrieve Stable Results for reference
      # # Will need to use this -> https://github.com/dawidd6/action-download-artifact
      # - name: Retrieve Stable Regression Results
      #   if: ${{ github.event_name != 'schedule' }}
      #   uses: dawidd6/action-download-artifact@v2
      #   with:
      #   # this will search for the last scheduled execution of CI on main and download
      #   # the stable regression results
      #     workflow: CI.yml
      #     workflow_conclusion: success
      #     branch: main
      #     name: stable-regression-results
      #     path: stable-results
      #     search_artifacts: true  # retrieves the last run result, either scheduled daily or on push to main

      # placeholder until the above is merged into main
      - name: Retrieve Stable Regression Results
        uses: actions/download-artifact@v3
        with:
          name: stable-regression-results
          path: stable-results
          # should result in a set of folders, each of which has the stable result for that example/test

      # Regression Testing - Actual Comparisons
      - name: Regression Tests - Compare to Baseline
        if: ${{ github.event_name != 'schedule' }}
        env:
          REFERENCE: stable-results
        run: |
          for regr_test in aromatics; #liquid_oxidation nitrogen oxidation sulfur superminimal eg1
          do
            # Memory Usage and Execution Time
            grep "checkModels" "$regr_test".log | cut -f2- -d'='
            echo 'Execution time for Reference:'
            grep "Execution time" $REFERENCE/RMG.log | tail -1
            echo 'Execution time for Current:'
            grep "Execution time" test/regression/"$regr_test"/RMG.log | tail -1
            echo 'Memory used for Reference:'
            grep "Memory used:" $REFERENCE/RMG.log | tail -1
            echo 'Memory used for Current:'
            grep "Memory used:" test/regression/"$regr_test"/RMG.log | tail -1

            # Compare the edge and core
            python-jl scripts/checkModels.py \
              "$regr_test" \
              $REFERENCE/chem_annotated.inp \
              $REFERENCE/species_dictionary.txt \
              test/regression/"$regr_test"/chemkin/chem_annotated.inp \
              test/regression/"$regr_test"/chemkin/species_dictionary.txt
            grep "checkModels" "$regr_test".log | cut -f2- -d'='
            python-jl scripts/checkModels.py \
              "$regr_test" \
              $REFERENCE/chem_edge_annotated.inp \
              $REFERENCE/species_edge_dictionary.txt \
              test/regression/"$regr_test"/chemkin/chem_edge_annotated.inp \
              test/regression/"$regr_test"/chemkin/species_edge_dictionary.txt

            # Check for Regression between Reference and New (skip superminimal)
            if [ -f test/regression/"$regr_test"/regression_input.py ];
            then
              python-jl /rmgpy/tools/regression.py \
                test/regression/"$regr_test"/regression_input.py \
                $REFERENCE \
                test/regression/"$regr_test"/chemkin
            fi
          done
      # Install and Call codecov only if ALL the tests were successful
      - name: Code coverage install and run
        run: |
          mamba install -y -c conda-forge codecov
          codecov
