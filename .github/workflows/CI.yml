name: Constant Integration

on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron: "0 8 * * *"
  push:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened, ready_for_review, review_requested]

# this prevents one PR from simultaneously running multiple runners, which will clog up the queue
# and prevent other PRs from running the CI
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test-linux:
    runs-on: ubuntu-latest
    env: # update this if needed to match a pull request on the RMG-database
      RMG_DATABASE_BRANCH: main
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v2

      # configures the mamba environment manager
      - name: Setup Mambaforge Python 3.7
        uses: conda-incubator/setup-miniconda@v2
        with:
          environment-file: environment.yml
          miniforge-variant: Mambaforge
          miniforge-version: latest
          python-version: 3.7
          activate-environment: rmg_env
          use-mamba: true

      # list the environment for debugging purposes
      - name: mamba info
        run: |
          mamba info
          mamba list

      # RMG installation and linking to Julia
      - name: Install and link Julia dependencies
        run: |
          RMS_INSTALL="using Pkg;\
           Pkg.add(PackageSpec(url=\"https://github.com/ReactionMechanismGenerator/ReactionMechanismSimulator.jl\", rev=\"main\"));\
           using ReactionMechanismSimulator"
          julia -e "$RMS_INSTALL"
          julia -e "using Pkg; Pkg.add(\"PyCall\"); Pkg.add(\"DifferentialEquations\")"
          python -c "import julia; julia.install()"
          ln -sfn $(which python-jl) $(which python)

      # Attempt to install MOPAC
      - name: Install MOPAC
        env:
          MOPACKEY: ${{ secrets.MOPACKEY }}
        timeout-minutes: 1
        continue-on-error: true # allowed to fail on pull request from a forked repository
        run: |
          set +o pipefail
          yes 'Yes' | ${CONDA_PREFIX}/bin/mopac "$MOPACKEY"

      # Clone the other needed repositories
      - name: Install and Compile RMG
        run: |
          cd ..
          git clone -b $RMG_DATABASE_BRANCH https://github.com/ReactionMechanismGenerator/RMG-database.git
          cd RMG-Py
          git clone -b arkanepy3 https://github.com/mjohnson541/Q2DTor.git external/Q2DTor
          make

      # non-regression testing
      - name: Unit tests
        run: make test-unittests
      - name: Functional tests
        if: ${{ success() || failure() }} # Run even if the unit tests failed (but not if they were cancelled)
        run: make test-functional
      - name: Database tests
        if: ${{ success() || failure() }} # Run even if the functional tests failed (but not if they were cancelled)
        run: make test-database

      # Regression Testing - Test Execution
      - name: Regression Tests - Execution
        run: |
          timeout 600 python-jl rmg.py test/regression/aromatics/input.py
          # ./run.sh test/regression/nitrogen
          # nitrogen_status=$?
          # ./run.sh test/regression/sulfur
          # sulfur_status=$?
          # ./run.sh test/regression/oxidation
          # oxidation_status=$?
          # ./run.sh test/regression/liquid_oxidation
          # liquid_oxidation_status=$?
          # ./run.sh test/regression/superminimal
          # superminimal_status=$?
          # ./run.sh test/regression/eg1
          # eg1_status=$?

          # echo "aromatics status: $aromatics_status"
          # echo "nitrogen status: $nitrogen_status"
          # echo "sulfur status: $sulfur_status"
          # echo "oxidation status: $oxidation_status"
          # echo "liquid oxidation status: $liquid_oxidation_status"
          # echo "superminimal status: $superminimal_status"
          # echo "eg1 status: $eg1_status"
          # if [ $(($aromatics_status | $nitrogen_status | $sulfur_status | $oxidation_status | $liquid_oxidation_status | $superminimal_status | $eg1_status)) -ne 0 ];
          # then
          #   echo "Failed regression tests (non-zero exit code from regression test)"
          #   exit 1
          # fi

      # Upload Regression Results if Scheduled
      - name: Upload Stable Regression Testing Results
        if: ${{ github.event_name == 'schedule' }}
        uses: actions/upload-artifact@v3
        with:
          name: stable-regression-results
          path: |
            test/regression/aromatics/chemkin/
            # test/regression/sulfur/chemkin

      # Retrieve Stable Results for reference
      - name: Retrieve Stable Regression Results
        if: ${{ github.event_name != 'schedule' }}
        uses: actions/download-artifact@v3
        with:
          name: stable-regression-results
          path: stable-results
          # should result in a set of folders, each of which has the stable result for that example/test

      # Regression Testing - Actual Comparisons
      - name: Regression Tests - Compare to Baseline
        if: ${{ github.event_name != 'schedule' }}
        run: |
          python-jl scripts/checkModels.py test/regression/aromatics $benchmark_model/chemkin/chem_annotated.inp $benchmark_model/chemkin/species_dictionary.txt $testing_model/chemkin/chem_annotated.inp $testing_model/chemkin/species_dictionary.txt

      # Install and Call codecov only if ALL the tests were successful
      - name: Code coverage install and run
        run: |
          mamba install -y -c conda-forge codecov
          codecov
